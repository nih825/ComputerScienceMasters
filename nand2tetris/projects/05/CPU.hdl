// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:
    // Put your code here.
    Mux16(a=instruction, b=aluoutput,sel=instruction[15],out=outtoregister);
    Not(in=instruction[15],out=notinstruction15);
    And(a=instruction[15], b=instruction[5],out=fiveand15);
    Or(a=fiveand15,b=notinstruction15,out=registerselector);
    ARegister(in=outtoregister, load=registerselector,out[0..14]=addressM,out=registerout);

    And(a=instruction[12],b=instruction[15],out=muxselector);
    Mux16(a=registerout,b=inM,sel=muxselector,out=prealuout);

    And(a=instruction[15],b=instruction[4],out=dselector);
    DRegister(in=aluoutput,load=dselector,out=dout);
    ALU(x=dout,y=prealuout,zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluoutput,out=outM, ng=ngout, zr=zrout);
    And(a=instruction[15],b=instruction[3],out=writeM);

    And(a=ngout,b=instruction[2],out=pc1);
    And(a=zrout,b=instruction[1],out=pc2);
    Not(in=ngout,out=notng);
    Not(in=zrout,out=notzr);
    And(a=notng,b=notzr,out=pc3temp1);
    And(a=pc3temp1,b=instruction[0],out=pc3);
    Or(a=pc1,b=pc2,out=pcloadtemp);
    Or(a=pc3,b=pcloadtemp,out=pcloadtemp1);
    And(a=instruction[15],b=pcloadtemp1,out=pcload);

    PC(in=registerout,reset=reset,inc=true, load=pcload, out[0..14]=pc);


}
