function Screen.init 2
push constant 0
pop local 1
push constant 16384
pop static 0
push constant 0
pop static 1
push constant 16
call Array.new 1
pop static 2
push constant 1
pop local 0
label WHILE_EXP0
push local 1
push constant 16
lt
not
if-goto WHILE_END0
push local 1
push static 2
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push local 0
add
pop local 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.clearScreen 1
push static 0
pop local 0
label WHILE_EXP0
push local 0
push constant 24576
lt
not
if-goto WHILE_END0
push local 0
push constant 0
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 1
push constant 0
return
function Screen.drawPixel 4
push constant 16384
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 2
push local 2
push static 2
add
pop pointer 1
push that 0
pop local 1
push local 0
call Memory.peek 1
pop local 3
push static 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
push local 1
or
pop local 3
goto IF_END0
label IF_FALSE0
push local 3
push local 1
not
and
pop local 3
label IF_END0
push local 0
push local 3
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 6
push constant 0
pop local 4
push argument 2
push argument 0
sub
pop local 2
push argument 3
push argument 1
sub
pop local 3
push local 3
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
push argument 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 2
push argument 0
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
goto IF_END1
label IF_FALSE1
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
label IF_END1
push constant 0
return
label IF_FALSE0
push local 2
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 2
neg
pop local 2
push argument 0
pop local 5
push argument 2
pop argument 0
push local 5
pop argument 2
push argument 1
pop local 5
push argument 3
pop argument 1
push local 5
pop argument 3
push local 3
neg
pop local 3
label IF_FALSE2
push local 3
push constant 0
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 3
neg
pop local 3
push constant 1
neg
pop local 5
goto IF_END3
label IF_FALSE3
push constant 1
pop local 5
label IF_END3
label WHILE_EXP0
push local 0
push local 2
gt
push local 1
push local 3
gt
or
push local 0
push constant 0
lt
or
push local 1
push constant 0
lt
or
not
not
if-goto WHILE_END0
push argument 0
push local 0
add
push argument 1
push local 5
push local 1
call Math.multiply 2
add
call Screen.drawPixel 2
pop temp 0
push local 4
push constant 0
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 0
push constant 1
add
pop local 0
push local 3
push local 4
add
pop local 4
goto IF_END4
label IF_FALSE4
push local 1
push constant 1
add
pop local 1
push local 2
push local 4
add
pop local 4
label IF_END4
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawHorizontalLine 9
push constant 16384
push argument 2
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 4
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 0
push constant 16384
push argument 2
push constant 32
call Math.multiply 2
add
push argument 1
push constant 16
call Math.divide 2
add
pop local 5
push argument 1
push argument 1
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 1
push local 4
push local 5
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
sub
call Math.abs 1
push constant 1
add
pop local 8
push local 0
push local 1
call Math.min 2
pop local 0
label WHILE_EXP0
push local 8
push constant 0
gt
not
if-goto WHILE_END0
push local 2
push local 0
push static 2
add
pop pointer 1
push that 0
add
pop local 2
push local 8
push constant 1
sub
pop local 8
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 4
call Memory.peek 1
pop local 6
push static 1
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 6
push local 2
not
and
pop local 6
goto IF_END1
label IF_FALSE1
push local 6
push local 2
or
pop local 6
label IF_END1
push local 4
push local 6
call Memory.poke 2
pop temp 0
push constant 0
return
label IF_FALSE0
label WHILE_EXP1
push local 0
push constant 15
gt
not
not
if-goto WHILE_END1
push local 2
push local 0
push static 2
add
pop pointer 1
push that 0
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
label WHILE_EXP2
push local 1
push constant 0
lt
not
not
if-goto WHILE_END2
push local 3
push local 1
push static 2
add
pop pointer 1
push that 0
add
pop local 3
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP2
label WHILE_END2
push local 4
call Memory.peek 1
pop local 6
push local 5
call Memory.peek 1
pop local 7
push static 1
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 6
push local 2
or
pop local 6
push local 7
push local 3
or
pop local 7
goto IF_END2
label IF_FALSE2
push local 6
push local 2
not
and
pop local 6
push local 7
push local 3
not
and
pop local 7
label IF_END2
push local 4
push local 6
call Memory.poke 2
pop temp 0
push local 5
push local 7
call Memory.poke 2
pop temp 0
push local 4
push constant 1
add
pop local 4
label WHILE_EXP3
push local 4
push local 5
lt
not
if-goto WHILE_END3
push local 4
push static 1
call Memory.poke 2
pop temp 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP3
label WHILE_END3
push constant 0
return
function Screen.drawRectangle 0
label WHILE_EXP0
push argument 3
push argument 1
gt
not
if-goto WHILE_END0
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 2
push argument 2
neg
push constant 1
add
pop local 0
label WHILE_EXP0
push local 0
push argument 2
lt
not
if-goto WHILE_END0
push argument 2
push argument 2
call Math.multiply 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push argument 0
push local 1
sub
push argument 0
push local 1
add
push argument 1
push local 0
add
call Screen.drawHorizontalLine 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
push argument 1
push argument 2
add
call Screen.drawPixel 2
pop temp 0
push argument 0
push argument 1
push argument 2
sub
call Screen.drawPixel 2
pop temp 0
push constant 0
return
